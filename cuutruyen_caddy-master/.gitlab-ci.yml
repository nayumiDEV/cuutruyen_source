stages:
  - build
  - deploy

build:
  image: docker:25
  services:
    - docker:25-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  stage: build
  only:
    - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - >
      docker build
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      --tag $CI_REGISTRY_IMAGE:latest
      --file Dockerfile
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

    # build for proxied version
    # - docker pull $CI_REGISTRY_IMAGE:proxied || true
    # - >
    #   docker build
    #   --cache-from $CI_REGISTRY_IMAGE:proxied
    #   --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    #   --tag $CI_REGISTRY_IMAGE:proxied
    #   --file proxied.Dockerfile
    #   .
    # - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # - docker push $CI_REGISTRY_IMAGE:proxied

deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  only:
    - master
  script:
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh
    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - >
      ssh $SSH_USER@$SSH_SERVER_IP
      "docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY;
      cd ${PATH_TO_PROJECT};
      ./start.sh;"
